/**
 * Mixins
 * ======================================================================== */

g-respond(sizes, callback)
    if Grid.responsive
        if is-hash(sizes)
            for bp, size in sizes
                if size != null
                    +above(bp)
                        callback(bp, size)

        if is-list(sizes)
            i = length(sizes)

            for bp in Grid.respond
                i -= 1

                if sizes[i] != null && sizes[i] != '_' && i >= 0
                    +above(bp)
                        callback(bp, sizes[i])

    if is-unit(sizes)
        callback(bp, sizes)


/**
 * Return the percentage width specified by the column count.
 */
grid_columns(count)
    if count >= 1
        count = count / Grid.columns

    return floor(count * 100%, Grid.error)


/**
 * Grid centering.
 *
 * responsive [mixed] -
 *              1) Width - width of the current block,
 *              2) Array of breakpoints that exists in grid breakpoints
 *              3) Hash of breakpoints with widhts
 *              4) Boolean that determine whether block will be responsive
 */
g-center(respond=null)
    respond = Grid.respond if respond == null

    display block
    mh: auto
    ph: (Grid.gutter / 2)

    if is-unit(respond) && respond
        width: respond
    else if is-string(respond) && respond
        width: Grid.container[respond]
    else if is-hash(respond)
        for bp, size in respond
            if size == null
                +above(bp)
                    width auto
            else
                +above(bp)
                    width: size
    else if is-list(respond)
        for bp in respond
            if Grid.container[bp] == null
                +above(bp)
                    width auto
            else
                +above(bp)
                    width: Grid.container[bp]
    else
        width: Grid.width


/**
 * Grid container.
 */
g-container()
    @extends $clearfix

    display block
    ph: 0
    mh: -.5 * Grid.gutter

    list-style none


/**
 * Grid columns.
 */
g-columns(sizes, dir=grid_direction())
    $gutter = Grid.gutter / 2

    display block
    min-height 1px

    ph: $gutter

    g-respond(sizes, @(bp, size) {
        if (size == Grid.columns) {
            float none
            width auto
        } else if (size == 0) {
            display none
        } else {
            float dir
            width grid_columns(size)
        }
    })


/**
 * Grid horizontal columns-offset.
 */
g-columns-offset(sizes, dir=null)
    prop = 'margin-'

    if dir != null
        dir = dir ? 'left' : 'right'
        prop += dir

    else
        prop += 'h'

    g-respond(sizes, @(bp, size) {
        {prop}(grid_columns(size))
    })


// Shortcuts for `g-columns-offset`
g-columns-offset-left(sizes)
    g-columns-offset(sizes, true)


g-columns-offset-right(sizes)
    g-columns-offset(sizes, false)